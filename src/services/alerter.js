import TelegramBot from 'node-telegram-bot-api';
import { getISTTime, getRiskLevel, formatVolume, parseIntEnv } from '../utils/index.js';
import dotenv from 'dotenv';

dotenv.config();

class FlashCrashAlerter {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
    this.chatId = process.env.TELEGRAM_CHAT_ID;
    this.lastAlertTime = 0;
    this.cooldownMs = parseIntEnv('COOLDOWN_MINUTES', 5) * 60 * 1000;
  }

  /**
   * Checks if we're still in cooldown period
   * @returns {boolean} True if in cooldown, false if ready to send alert
   */
  isOnCooldown() {
    return Date.now() - this.lastAlertTime < this.cooldownMs;
  }

  /**
   * Sends flash crash alert to Telegram
   * @param {Object} alertData - Alert information
   * @param {string} alertData.symbol - Trading pair symbol
   * @param {number} alertData.askToBidRatio - Current ask/bid volume ratio
   * @param {number} alertData.totalBidVolume - Total bid volume
   * @param {number} alertData.totalAskVolume - Total ask volume
   * @param {number} alertData.currentPrice - Current market price
   */
  async triggerFlashCrashAlert(alertData) {
    if (this.isOnCooldown()) {
      console.log(`‚è∞ Alert suppressed - still in cooldown period`);
      return false;
    }

    const {
      symbol,
      askToBidRatio,
      totalBidVolume,
      totalAskVolume,
      currentPrice
    } = alertData;

    const message = this.formatAlertMessage({
      symbol,
      askToBidRatio,
      totalBidVolume,
      totalAskVolume,
      currentPrice
    });

    try {
      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });

      this.lastAlertTime = Date.now();
      console.log(`üö® Flash crash alert sent for ${symbol}`);
      return true;

    } catch (error) {
      console.error('‚ùå Failed to send Telegram alert:', error.message);
      return false;
    }
  }

  /**
   * Formats the alert message for Telegram
   * @param {Object} data - Alert data
   * @returns {string} Formatted message
   */
  formatAlertMessage(data) {
    const {
      symbol,
      askToBidRatio,
      totalBidVolume,
      totalAskVolume,
      currentPrice,
      momentum,
      algorithmVersion
    } = data;

    const timestamp = getISTTime();
    const riskLevel = getRiskLevel(askToBidRatio);
    const signalType = data.signalType || 'CRITICAL';
    const confidence = data.confidence || 'HIGH';
    const version = algorithmVersion || 'v2.0';

    // SentryCoin v4.0 Signal Formatting
    if (signalType === 'TRIFECTA_CONVICTION_SIGNAL') {
      return `üö® *SENTRYCOIN v4.0 TRIFECTA CONVICTION* üö®

üìä *Asset:* ${symbol} (BINANCE)
üí∞ *Current Price:* $${currentPrice.toFixed(6)}
‚ö†Ô∏è *Strategy:* SHORT (${confidence} Confidence)
üéØ *Phenomenon:* LIQUIDITY CASCADE

üî• *TRIFECTA CONDITIONS MET:*
‚Ä¢ **Pressure:** ${askToBidRatio.toFixed(2)}x ‚úÖ (‚â•3.0x)
‚Ä¢ **Liquidity:** ${formatVolume(totalBidVolume)} ‚úÖ (‚â•100k HIGH)
‚Ä¢ **Momentum:** ${momentum.toFixed(3)}% ‚úÖ (‚â§-0.3% STRONG)

üìà *Market Analysis:*
High liquidity being overwhelmed by massive sell pressure. Classic flash crash setup with strong downward momentum.

üéØ *Expected Outcome:* CONTINUED DECLINE
‚ö° *Action:* Consider SHORT position or protective measures
üõ°Ô∏è *Risk:* HIGH - Liquidity cascade in progress

‚è∞ *Time:* ${timestamp}
ü§ñ *Engine:* SentryCoin v4.0 (Binance Edition)`;
    }

    if (signalType === 'ABSORPTION_SQUEEZE_SIGNAL') {
      return `üîÑ *SENTRYCOIN v4.0 ABSORPTION SQUEEZE* üîÑ

üìä *Asset:* ${symbol} (BINANCE)
üí∞ *Current Price:* $${currentPrice.toFixed(6)}
‚ö†Ô∏è *Strategy:* LONG (${confidence} Confidence)
üéØ *Phenomenon:* FORCED ABSORPTION

üîÑ *SQUEEZE CONDITIONS MET:*
‚Ä¢ **Pressure:** ${askToBidRatio.toFixed(2)}x ‚úÖ (‚â•3.0x)
‚Ä¢ **Liquidity:** ${formatVolume(totalBidVolume)} ‚úÖ (<50k LOW)
‚Ä¢ **Momentum:** ${momentum.toFixed(3)}% ‚úÖ (-0.2% to +0.2% WEAK)

üìà *Market Analysis:*
Thin liquidity absorbing sell pressure with weak momentum. Sellers being absorbed by resilient buyers.

üéØ *Expected Outcome:* MEAN REVERSION UP
‚ö° *Action:* Consider LONG position on absorption
üõ°Ô∏è *Risk:* MEDIUM - Forced absorption pattern

‚è∞ *Time:* ${timestamp}
ü§ñ *Engine:* SentryCoin v4.0 (Binance Edition)`;
    }

    if (signalType === 'PRESSURE_SPIKE_SIGNAL') {
      return `üî• *SENTRYCOIN v4.0 PRESSURE SPIKE* üî•

üìä *Asset:* ${symbol} (BINANCE)
üí∞ *Current Price:* $${currentPrice.toFixed(6)}
‚ö†Ô∏è *Strategy:* NEUTRAL (${confidence} Confidence)
üéØ *Phenomenon:* VOLATILITY BREAKOUT PENDING

üî• *PRESSURE SPIKE CONDITIONS MET:*
‚Ä¢ **Pressure:** ${askToBidRatio.toFixed(2)}x ‚úÖ (‚â•3.0x)
‚Ä¢ **Liquidity:** ${formatVolume(totalBidVolume)} ‚úÖ (50k-100k MID)
‚Ä¢ **Momentum:** ${momentum.toFixed(3)}% ‚úÖ (-0.2% to +0.2% WEAK)

üìà *Market Analysis:*
High pressure building in mid-liquidity zone. Market is coiled and ready to break in either direction.

üéØ *Expected Outcome:* VOLATILITY BREAKOUT
‚ö° *Action:* Prepare for directional breakout - high volatility imminent
üõ°Ô∏è *Risk:* HIGH - Explosive move pending

‚è∞ *Time:* ${timestamp}
ü§ñ *Engine:* SentryCoin v4.0 (Binance Edition)`;
    }

    // Legacy Trifecta Algorithm (v3.0) formatting - fallback
    if (signalType === 'TRIFECTA' && version === 'v3.0') {
      const pressureCondition = askToBidRatio > 3.0;
      const liquidityCondition = totalBidVolume < 100000;
      const momentumCondition = momentum <= -0.1;

      return `üö® *SENTRYCOIN v3.0 TRIFECTA ALERT* üö®

üìä *Asset:* ${symbol}
üí∞ *Current Price:* $${currentPrice.toFixed(6)}
‚ö†Ô∏è *Risk Level:* ${riskLevel}
üéØ *Signal Type:* ${signalType} (${confidence} Confidence)

üî• *TRIFECTA CONDITIONS MET:*
‚Ä¢ **Pressure:** ${askToBidRatio.toFixed(2)}x ${pressureCondition ? '‚úÖ' : '‚ùå'} (>3.0x)
‚Ä¢ **Liquidity:** ${formatVolume(totalBidVolume)} ${liquidityCondition ? '‚úÖ' : '‚ùå'} (<100k)
‚Ä¢ **Momentum:** ${momentum.toFixed(2)}% ${momentumCondition ? '‚úÖ' : '‚ùå'} (‚â§-0.1%)

üìà *Market Analysis:*
‚Ä¢ Total Ask Volume: ${formatVolume(totalAskVolume)}
‚Ä¢ Sell Pressure: EXTREME
‚Ä¢ Buy Support: FRAGILE
‚Ä¢ Market Trend: BEARISH

üéØ *Analysis:* PERFECT STORM - All three crash conditions aligned
‚ö° *Implication:* VERY HIGH probability of imminent flash crash
üõ°Ô∏è *Action:* IMMEDIATE attention required - Consider protective measures

‚è∞ *Time:* ${timestamp}
ü§ñ *Engine:* SentryCoin Predictor v3.0 (Trifecta Algorithm)`;
    }

    // Golden Signal Algorithm (v2.0) formatting - fallback
    const isGoldenSignal = askToBidRatio >= 2.75 && totalBidVolume < 100000;

    return `üö® *SENTRYCOIN v2.0 ${signalType} ALERT* üö®

üìä *Asset:* ${symbol}
üí∞ *Current Price:* $${currentPrice.toFixed(6)}
‚ö†Ô∏è *Risk Level:* ${riskLevel}
üéØ *Signal Type:* ${signalType} (${confidence} Confidence)

üìà *Golden Signal Analysis:*
‚Ä¢ Ask/Bid Ratio: *${askToBidRatio.toFixed(2)}x* ${askToBidRatio >= 2.75 ? '‚úÖ' : '‚ùå'} (Threshold: ‚â•2.75x)
‚Ä¢ Total Bid Volume: ${formatVolume(totalBidVolume)} ${totalBidVolume < 100000 ? '‚úÖ' : '‚ùå'} (Threshold: <100k)
‚Ä¢ Total Ask Volume: ${formatVolume(totalAskVolume)}
‚Ä¢ Golden Signal: ${isGoldenSignal ? 'üü¢ CONFIRMED' : 'üü° PARTIAL'}

üéØ *Analysis:* ${isGoldenSignal ? 'CRITICAL liquidity crisis detected' : 'Market stress indicators present'}
‚ö° *Implication:* ${isGoldenSignal ? 'HIGH probability of imminent flash crash' : 'Elevated crash risk - monitor closely'}
üõ°Ô∏è *Action:* ${isGoldenSignal ? 'IMMEDIATE attention required' : 'Increased vigilance recommended'}

‚è∞ *Time:* ${timestamp}
ü§ñ *Engine:* SentryCoin Predictor v2.0 (Golden Signal Algorithm)`;
  }



  /**
   * Sends a test alert to verify Telegram configuration
   */
  async sendTestAlert() {
    const timestamp = getISTTime();

    const testMessage = `üß™ *SentryCoin Test Alert*

This is a test message to verify your Telegram configuration is working correctly.

‚è∞ Time: ${timestamp}
ü§ñ Status: System operational`;

    try {
      await this.bot.sendMessage(this.chatId, testMessage, {
        parse_mode: 'Markdown'
      });
      console.log('‚úÖ Test alert sent successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Test alert failed:', error.message);
      return false;
    }
  }
}

export default FlashCrashAlerter;
